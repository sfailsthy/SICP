(load "actual-value.scm")
(load "apply.scm")
(load "eval-if.scm")
(load "eval.scm")
(load "list-of-arg-values.scm")
(load "list-of-delayed-args.scm")
(load "thunk.scm")
(load "../4.1/application.scm")
(load "../4.1/assignment.scm")
(load "../4.1/begin.scm")
(load "../4.1/cond.scm")
(load "../4.1/definition.scm")
(load "../4.1/environment.scm")
(load "../4.1/eval-assignment.scm")
(load "../4.1/eval-definition.scm")
(load "../4.1/eval-sequence.scm")
(load "../4.1/if.scm")
(load "../4.1/lambda.scm")
(load "../4.1/predicate.scm")
(load "../4.1/primitive-procedure.scm")
(load "../4.1/procedure.scm")
(load "../4.1/quote.scm")
(load "../4.1/self-evaluating.scm")
(load "../4.1/setup-environment.scm")
(load "../4.1/tagged-list.scm")
(load "../4.1/variable.scm")
(load "../4.1/4.04.a.scm")
(load "../4.1/4.06.scm")
(load "../4.1/4.07.scm")
(load "4.26.scm")

(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval output:")
(define the-global-environment (setup-environment))

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))

(define (prompt-for-input string)
  (newline)
  (newline)
  (display string)
  (newline))

(define (announce-output string)
  (newline)
  (display string)
  (newline))

(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (prcedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))