(define (eval exp env)
  (cond ((self-evaluating? exp)
         exp)
        ((variable? exp)
         (lookup-variable-value exp env))
        ((quoted? exp)
         (text-of-quotation exp))
        ((assignment? exp)
         (eval-assignment exp env))
        ((definition? exp)
         (eval-definition exp env))
        ((if? exp)
         (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp)
         (eval (cond->if exp) env))
        ((and? exp)
         (eval-and (and-exps exp) env))
        ((or? exp)
         (eval-or (or-exps exp) env))
        ((let? exp)
         (eval (let->combination exp) env))
        ((let*? exp)
         (eval (let*->nested-lets exp) env))
        ((unless? exp)
         (eval (unless->if exp) env))
        ((while? exp)
         (eval (while->combination exp) env))
        ((do? exp)
         (eval (do->while exp) env))
        ((for? exp)
         (eval (for->while exp) env))
        ((application? exp)
         (applyn (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL"
                exp))))